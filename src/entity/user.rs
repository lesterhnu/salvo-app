//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "user"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: i32,
    pub username: Option<String>,
    pub password: Option<String>,
    pub uuid: Option<String>,
    pub email: Option<String>,
    pub phone: Option<String>,
    pub created_at: Option<TimeDateTime>,
    pub is_disabled: Option<i8>,
    pub last_login_time: Option<TimeDateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Username,
    Password,
    Uuid,
    Email,
    Phone,
    CreatedAt,
    IsDisabled,
    LastLoginTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Integer.def(),
            Self::Username => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::Password => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::Uuid => ColumnType::String(StringLen::N(64u32)).def().null(),
            Self::Email => ColumnType::String(StringLen::N(32u32)).def().null(),
            Self::Phone => ColumnType::String(StringLen::N(20u32)).def().null(),
            Self::CreatedAt => ColumnType::DateTime.def().null(),
            Self::IsDisabled => ColumnType::TinyInteger.def().null(),
            Self::LastLoginTime => ColumnType::DateTime.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
